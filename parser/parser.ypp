%skeleton "lalr1.cc"
%require "2.1a"
%defines
%define "parser_class_name" "SQLParser"

%code requires {
#include "Tree.h"
#include <cstring>
#include <vector>

class Driver;
}

%parse-param { Driver& driver }
%lex-param   { Driver& driver }
%locations
%initial-action
{
    @$.begin.filename = @$.end.filename = &driver.file;
};

%union {
    char ident[1024]; // identifier
    Value *value; // Value
    CValue *cvalue; // const value
    Tree *tree; // Tree
    std::vector<Tree*> *tlist; // [Tree]
    std::vector< std::vector<Tree*>* > *ttlist; // [[Tree]]
    int integer;
    std::vector<int> *ilist;
    std::vector<const char*> *slist;
};

%{
#include "Driver.h"
%}

//-- SYMBOL SEMANTIC VALUES -----------------------------
%token DATABASE DATABASES TABLE TABLES SHOW CREATE
%token DROP USE CHECK PRIMARY KEY UNIQUE
%token NOT NIL AUTO_INCREMENT INSERT INTO VALUES
%token DELETE FROM WHERE UPDATE SET SELECT
%token GROUP BY IS IN BETWEEN LIKE
%token AND OR SUM AVG MAX MIN
%token INT SMALLINT BIGINT FLOAT REAL DOUBLE
%token VARCHAR STRING CHAR BOOLEAN DATETIME
%token EQ NE LE GE LT GT
%token LP RP COMMA STOP DOT
%token PLUS MINUS MUL DIV MOD
%token DESC FOREIGN REFERENCES INDEX DEFAULT
%token TRUE FALSE
%token END 0 "end of file"
%token <value> VALUE
%token <ident> IDENT

%type <tree> program stmt sysStmt dbStmt tbStmt type boolExpr columns eq selector where groupBy selectors expr field col idxStmt attr
%type <tlist> fields stmts set eqs sellist attrs
%type <ttlist> sets
%type <integer> func
%type <slist> idents
%type <value> value
%type <cvalue> cvalue

%left OR
%left AND
%left ADD SUB
%left MUL DIV MOD

//-- GRAMMAR RULES ---------------------------------------
%%
%start program;

program     :   stmts
                {
                    driver.ast = new TopLevel($1);
                }
            ;

stmts       :   /* empty */
                {
                    $$ = new std::vector<Tree*>;
                }
            |   stmts stmt
                {
                    $$ = $1;
                    $$->push_back($2);
                }
            ;

stmt        :   sysStmt STOP
            |   dbStmt STOP
            |   tbStmt STOP
            |   idxStmt STOP
            ;

sysStmt     :   SHOW DATABASES
                {
                    $$ = new ListDB;
                }
            ;

dbStmt      :   CREATE DATABASE IDENT
                {
                    $$ = new CreateDBStmt($3);
                }
            |   DROP DATABASE IDENT
                {
                    $$ = new DropDBStmt($3);
                }
            |   USE IDENT
                {
                    $$ = new UseDBStmt($2);
                }
            |   SHOW TABLES
                {
                    $$ = new ListTB;
                }
            ;

tbStmt      :   CREATE TABLE IDENT LP fields RP
                {
                    $$ = new CreateTBStmt($3, $5);
                }
            |   DROP TABLE IDENT
                {
                    $$ = new DropTBStmt($3);
                }
            |   SHOW TABLE IDENT
                {
                    $$ = new ShowTBStmt($3);
                }
            |   DESC IDENT
                {
                    $$ = new ShowTBStmt($2);
                }
            |   INSERT INTO IDENT columns VALUES sets
                {
                    $$ = new InsertStmt($3, $4, $6);
                }
            |   DELETE FROM IDENT WHERE boolExpr
                {
                    $$ = new DeleteStmt($3, $5);
                }
            |   UPDATE IDENT SET eqs WHERE boolExpr
                {
                    $$ = new UpdateStmt($2, $4, $6);
                }
            |   SELECT selectors FROM idents where groupBy
                {
                    $$ = new SelectStmt($4, $2, $5, $6);
                }
            ;

fields      :   field
                {
                    $$ = new std::vector<Tree*>;
                    $$->push_back($1);
                }
            |   fields COMMA field
                {
                    $$ = $1;
                    $$->push_back($3);
                }
            ;

field       :   IDENT type attrs
                {
                    $$ = new Field($2, $1, $3);
                }
            |   CHECK LP boolExpr RP
                {
                    $$ = new Check($3);
                }
            |   PRIMARY KEY LP IDENT RP
                {
                    $$ = new PrimaryKey($4);
                }
            |   FOREIGN KEY LP IDENT RP REFERENCES IDENT LP IDENT RP
                {
                    $$ = new ForeignKey($4, $7, $9);
                }
            ;

type        :   INT
                {
                    $$ = new Type(Type::TYPE_INT);
                }
            |   INT LP value RP
                {
                    // value must be non-negative integer
                    if ($3->kind == Value::VALUE_INT && $3->val.front() != '-') {
                        $$ = new Type(Type::TYPE_INT, atoi($3->val.c_str()));
                    } else { // using default
                        $$ = new Type(Type::TYPE_INT);
                    }
                }
            |   SMALLINT
                {
                    $$ = new Type(Type::TYPE_SMALL_INT);
                }
            |   BIGINT
                {
                    $$ = new Type(Type::TYPE_BIG_INT);
                }
            |   FLOAT
                {
                    $$ = new Type(Type::TYPE_FLOAT);
                }
            |   DOUBLE
                {
                    $$ = new Type(Type::TYPE_DOUBLE);
                }
            |   VARCHAR LP value RP
                {
                    // value must be non-negative integer
                    if ($3->kind == Value::VALUE_INT && $3->val.front() != '-') {
                        $$ = new Type(Type::TYPE_STRING, atoi($3->val.c_str()));
                    } else { // using default
                        $$ = new Type(Type::TYPE_STRING, 255);
                    }
                }
            |   STRING
                {
                    $$ = new Type(Type::TYPE_STRING);
                }
            |   CHAR
                {
                    $$ = new Type(Type::TYPE_CHAR);
                }
            |   BOOLEAN
                {
                    $$ = new Type(Type::TYPE_BOOLEAN);
                }
            |   DATETIME
                {
                    $$ = new Type(Type::TYPE_DATETIME);
                }
            ;

value       :   VALUE
                {
                    $$ = $1;
                }
            |   NIL
                {
                    $$ = new Value(Value::VALUE_NULL);
                }
            |   TRUE
                {
                    $$ = new Value(Value::VALUE_TRUE);
                }
            |   FALSE
                {
                    $$ = new Value(Value::VALUE_FALSE);
                }
            ;

cvalue      :   VALUE
                {
                    $$ = new CValue($1);
                }
            |   PLUS VALUE
                {
                    $$ = new CValue($2);
                }
            |   MINUS VALUE
                {
                    $$ = new CValue($2, true);
                }
            ;

attrs       :   /* empty */
                {
                    $$ = new std::vector<Tree*>;
                }
            |   attrs attr
                {
                    $$ = $1;
                    $$->push_back($2);
                }
            ;

attr        :   NOT NIL
                {
                    $$ = new Attr(Attr::ATTR_NOT_NULL);
                }
            |   UNIQUE
                {
                    $$ = new Attr(Attr::ATTR_UNIQUE);
                }
            |   AUTO_INCREMENT
                {
                    $$ = new Attr(Attr::ATTR_AUTO_INCREMENT);
                }
            |   DEFAULT value
                {
                    $$ = new Attr($2);
                }
            ;

sets        :   LP set RP
                {
                    $$ = new std::vector< std::vector<Tree*>* >;
                    $$->push_back($2);
                }
            |   sets COMMA LP set RP
                {
                    $$ = $1;
                    $$->push_back($4);
                }
            ;

col         :   IDENT
                {
                    $$ = new Col($1);
                }
            |   IDENT DOT IDENT
                {
                    $$ = new Col($1, $3);
                }
            ;

boolExpr    :   col IS NIL
                {
                    $$ = new NullExpr($1, BoolExpr::OP_IS_NULL);
                }
            |   col IS NOT NIL
                {
                    $$ = new NullExpr($1, BoolExpr::OP_IS_NOT_NULL);
                }
            |   col IN LP set RP
                {
                    $$ = new InExpr($1, $4, BoolExpr::OP_IN);
                }
            |   col NOT IN LP set RP
                {
                    $$ = new InExpr($1, $5, BoolExpr::OP_NOT_IN);
                }
            |   col BETWEEN cvalue AND cvalue
                {
                    $$ = new BetweenExpr($1, $3, $5, BoolExpr::OP_BETWEEN);
                }
            |   col NOT BETWEEN cvalue AND cvalue
                {
                    $$ = new BetweenExpr($1, $4, $6, BoolExpr::OP_NOT_BETWEEN);
                }
            |   col LIKE value
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_LIKE);
                }
            |   col NOT LIKE value
                {
                    $$ = new CompareExpr($1, $4, BoolExpr::OP_NOT_LIKE);
                }
            |   col EQ expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_EQ);
                }
            |   col NE expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_NE);
                }
            |   col GE expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_GE);
                }
            |   col LE expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_LE);
                }
            |   col GT expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_GT);
                }
            |   col LT expr
                {
                    $$ = new CompareExpr($1, $3, BoolExpr::OP_LT);
                }
            |   LP boolExpr RP
                {
                    $$ = $2;
                }
            |   boolExpr AND boolExpr
                {
                    $$ = new ComplexExpr($1, $3, BoolExpr::OP_AND);
                }
            |   boolExpr OR boolExpr
                {
                    $$ = new ComplexExpr($1, $3, BoolExpr::OP_OR);
                }
            ;

set         :   cvalue
                {
                    $$ = new std::vector<Tree*>;
                    $$->push_back($1);
                }
            |   set COMMA cvalue
                {
                    $$ = $1;
                    $$->push_back($3);
                }
            ;

columns     :   /* empty */
                {
                    $$ = new Columns;
                }
            |   LP idents RP
                {
                    $$ = new Columns($2);
                }
            ;

idents      :   IDENT
                {
                    $$ = new std::vector<const char*>;
                    char *tmp = new char[1024];
                    strncpy(tmp, $1, 1024);
                    $$->push_back(tmp);
                }
            |   idents COMMA IDENT
                {
                    $$ = $1;
                    char *tmp = new char[1024];
                    strncpy(tmp, $3, 1024);
                    $$->push_back(tmp);
                }
            ;

eqs         :   eq
                {
                    $$ = new std::vector<Tree*>;
                    $$->push_back($1);
                }
            |   eqs COMMA eq
                {
                    $$ = $1;
                    $$->push_back($3);
                }
            ;

eq          :   IDENT EQ expr
                {
                    $$ = new Eq($1, $3);
                }
            ;

selectors   :   MUL
                {
                    $$ = new Selectors;
                }
            |   sellist
                {
                    $$ = new Selectors($1);
                }
            ;

sellist     :   selector
                {
                    $$ = new std::vector<Tree*>;
                    $$->push_back($1);
                }
            |   sellist COMMA selector
                {
                    $$ = $1;
                    $$->push_back($3);
                }
            ;

selector    :   col
                {
                    $$ = new Selector($1);
                }
            |   func LP col RP
                {
                    $$ = new Selector($1, $3);
                }
            ;

func        :   SUM
                {
                    $$ = Selector::FUNC_SUM;
                }
            |   AVG
                {
                    $$ = Selector::FUNC_AVG;
                }
            |   MAX
                {
                    $$ = Selector::FUNC_MAX;
                }
            |   MIN
                {
                    $$ = Selector::FUNC_MIN;
                }
            ;

where       :   /* empty */
                {
                    $$ = new Where;
                }
            |   WHERE boolExpr
                {
                    $$ = new Where($2);
                }
            ;

groupBy     :   /* empty */
                {
                    $$ = new GroupBy;
                }
            |   GROUP BY IDENT
                {
                    $$ = new GroupBy($3);
                }
            |   GROUP BY IDENT DOT IDENT
                {
                    $$ = new GroupBy($3, $5);
                }
            ;

expr        :   value
                {
                    $$ = $1;
                }
            |   IDENT
                {
                    $$ = new Col($1);
                }
            |   IDENT DOT IDENT
                {
                    $$ = new Col($1, $3);
                }
            |   PLUS expr
                {
                    $$ = new UnonExpr($2, Expr::OP_POS);
                }
            |   MINUS expr
                {
                    $$ = new UnonExpr($2, Expr::OP_NEG);
                }
            |   expr PLUS expr
                {
                    $$ = new BinExpr($1, $3, Expr::OP_ADD);
                }
            |   expr MINUS expr
                {
                    $$ = new BinExpr($1, $3, Expr::OP_SUB);
                }
            |   expr MUL expr
                {
                    $$ = new BinExpr($1, $3, Expr::OP_MUL);
                }
            |   expr DIV expr
                {
                    $$ = new BinExpr($1, $3, Expr::OP_DIV);
                }
            |   expr MOD expr
                {
                    $$ = new BinExpr($1, $3, Expr::OP_MOD);
                }
            |   LP expr RP
                {
                    $$ = $2;
                }
            ;

idxStmt     :   CREATE INDEX IDENT LP IDENT RP
                {
                    $$ = new CreateIdxStmt($3, $5);
                }
            |   DROP INDEX IDENT LP IDENT RP
                {
                    $$ = new DropIdxStmt($3, $5);
                }
            ;

%%
void yy::SQLParser::error(const yy::SQLParser::location_type& l,
    const std::string& m)
{
    driver.error(l, m);
}
